Sections:
00: "org0001:8003" (8003-8116)


Source: "programs/calc.asm"
                        	     1:   .org $8003
                        	     2: 
                        	     3: SERIAL  = $8002
                        	     4: NEWLINE =    $a
                        	     5: ESCAPE  =   $1b
                        	     6: CLEAR   =   $11
                        	     7: 
                        	     8: EXIT_VEC = $fff8
                        	     9: 
                        	    10: ; memory allocation:
                        	    11: PRINT      = $50      ; 2 bytes
                        	    12: BYTE_BUILD = $40      ; 1 byte
                        	    13: OPERANDA   = $30      ; 1 byte
                        	    14: OPERATOR   = $20      ; 1 byte
                        	    15: OPERANDB   = $10      ; 1 byte
                        	    16: 
                        	    17: main:
00:8003 A9B0            	    18:   lda #welcome_message
00:8005 8550            	    19:   sta PRINT
00:8007 A980            	    20:   lda #>welcome_message
00:8009 8551            	    21:   sta PRINT+1
00:800B 20A280          	    22:   jsr print
                        	    23: 
                        	    24: loop:
00:800E 201480          	    25:   jsr expression
00:8011 4C0E80          	    26:   jmp loop
                        	    27: 
                        	    28: ; calculate an addition or subtraction, taking input and printing output
                        	    29: expression:
                        	    30:   ; get the first number and store it in memory
00:8014 209380          	    31:   jsr get_byte
00:8017 8530            	    32:   sta OPERANDA
                        	    33:   
                        	    34:   ; get the operation type, used later
00:8019 205080          	    35:   jsr get_key
00:801C 8520            	    36:   sta OPERATOR
                        	    37: 
                        	    38:   ; get the second number
00:801E 209380          	    39:   jsr get_byte
00:8021 8510            	    40:   sta OPERANDB
                        	    41: 
                        	    42:   ; print ' = '
00:8023 A912            	    43:   lda #equals
00:8025 8550            	    44:   sta PRINT
00:8027 A981            	    45:   lda #>equals
00:8029 8551            	    46:   sta PRINT+1
00:802B 20A280          	    47:   jsr print
                        	    48: 
                        	    49:   ; if they chose addition, skip the next section
00:802E A520            	    50:   lda OPERATOR
00:8030 C92B            	    51:   cmp #"+"
00:8032 F008            	    52:   beq _expression_addition
                        	    53: 
                        	    54:   ; find the result with subtraction
00:8034 A530            	    55:   lda OPERANDA
00:8036 38              	    56:   sec
00:8037 E510            	    57:   sbc OPERANDB
00:8039 4C4180          	    58:   jmp _expression_print
                        	    59: _expression_addition:
                        	    60:   ; add the numbers
00:803C A530            	    61:   lda OPERANDA
00:803E 18              	    62:   clc
00:803F 6510            	    63:   adc OPERANDB
                        	    64: _expression_print:
                        	    65:   ; print the result
00:8041 208280          	    66:   jsr hex_byte
00:8044 8E0280          	    67:   stx SERIAL
00:8047 8C0280          	    68:   sty SERIAL
                        	    69: 
                        	    70:   ; return back to the system monitor
00:804A A90A            	    71:   lda #NEWLINE
00:804C 8D0280          	    72:   sta SERIAL
00:804F 60              	    73:   rts
                        	    74: 
                        	    75: ; return (in a) a single key, ignoring spaces
                        	    76: ; modifies: a (duh)
                        	    77: get_key:
00:8050 AD0280          	    78:   lda SERIAL
00:8053 F0FB            	    79:   beq get_key       ; if no char was typed, check again.
00:8055 C91B            	    80:   cmp #ESCAPE       ; if escape was pressed,
00:8057 F008            	    81:   beq _get_key_exit ; return to the system monitor
00:8059 8D0280          	    82:   sta SERIAL        ; echo back the char.
00:805C C920            	    83:   cmp #" "          ; if space was pressed,
00:805E F0F0            	    84:   beq get_key       ; wait for the next key.
00:8060 60              	    85:   rts
                        	    86: _get_key_exit:
00:8061 A90A            	    87:   lda #NEWLINE
00:8063 8D0280          	    88:   sta SERIAL
00:8066 6CF8FF          	    89:   jmp (EXIT_VEC)
                        	    90: 
                        	    91: ; wait for a key and return (in a) the value of a single hex char
                        	    92: ; modifies: a (duh)
                        	    93: get_nibble:
00:8069 205080          	    94:   jsr get_key
00:806C C93A            	    95:   cmp #$3a
00:806E 9004            	    96:   bcc _get_nibble_digit
00:8070 38              	    97:   sec
00:8071 E957            	    98:   sbc #"a" - 10
00:8073 60              	    99:   rts
                        	   100: _get_nibble_digit:
00:8074 E92F            	   101:   sbc #"0" - 1
00:8076 60              	   102:   rts
                        	   103: 
                        	   104: ; return (in a) the a register as hex
                        	   105: ; modifies: a (duh)
                        	   106: hex_nibble:
00:8077 C90A            	   107:   cmp #10
00:8079 9004            	   108:   bcc _hex_nibble_digit
00:807B 18              	   109:   clc
00:807C 6957            	   110:   adc #"a" - 10
00:807E 60              	   111:   rts
                        	   112: _hex_nibble_digit:
00:807F 6930            	   113:   adc #"0"
00:8081 60              	   114:   rts
                        	   115: 
                        	   116: ; return (in x & y) the a register as hex
                        	   117: ; modifies: x, y, a
                        	   118: hex_byte:
00:8082 48              	   119:   pha ; save the full value for later
                        	   120:   ; get just the MSN
00:8083 4A              	   121:   lsr
00:8084 4A              	   122:   lsr
00:8085 4A              	   123:   lsr
00:8086 4A              	   124:   lsr
00:8087 207780          	   125:   jsr hex_nibble
00:808A AA              	   126:   tax ; but the hex char for the MSN in x
                        	   127: 
00:808B 68              	   128:   pla ; bring back the full value
00:808C 290F            	   129:   and #$0f ; get just the LSN
00:808E 207780          	   130:   jsr hex_nibble
00:8091 A8              	   131:   tay ; but the hex char for the LSN in y
                        	   132: 
00:8092 60              	   133:   rts
                        	   134: 
                        	   135: ; wait for a key and return (in a) the value of a byte (2 hex chars)
                        	   136: ; modifies: a (duh)
                        	   137: get_byte:
                        	   138:   ; get the MS nibble and move it to the MS area of the a reg
00:8093 206980          	   139:   jsr get_nibble
00:8096 0A              	   140:   asl
00:8097 0A              	   141:   asl
00:8098 0A              	   142:   asl
00:8099 0A              	   143:   asl
                        	   144:   ; move the MSN to memory
00:809A 8540            	   145:   sta BYTE_BUILD
                        	   146: 
                        	   147:   ; get the LSN and combine it with the MSN
00:809C 206980          	   148:   jsr get_nibble
00:809F 0540            	   149:   ora BYTE_BUILD
00:80A1 60              	   150:   rts
                        	   151: 
                        	   152: ; print a null-terminated string pointed to by PRINT
                        	   153: ; modifies: a, y
                        	   154: print:
00:80A2 A000            	   155:   ldy #0
                        	   156: _print_loop:
00:80A4 B150            	   157:   lda (PRINT),y
00:80A6 F007            	   158:   beq _print_done
00:80A8 8D0280          	   159:   sta SERIAL
00:80AB C8              	   160:   iny
00:80AC 4CA480          	   161:   jmp _print_loop
                        	   162: _print_done:
00:80AF 60              	   163:   rts
                        	   164: 
                        	   165: welcome_message:
00:80B0 11              	   166:   .byte CLEAR, ESCAPE, "[7m"
00:80B1 1B
00:80B2 5B376D
00:80B5 204F36342043616C	   167:   .byte " O64 Calculator v1.0.1 "
00:80BD 63756C61746F7220
00:80C5 76312E302E3120
00:80CC 1B              	   168:   .byte ESCAPE, "[0m", NEWLINE
00:80CD 5B306D
00:80D0 0A
                        	   169: 
00:80D1 5449503A20537061	   170:   .byte "TIP: Spaces are optional.", NEWLINE
00:80D9 6365732061726520
00:80E1 6F7074696F6E616C
00:80E9 2E
00:80EA 0A
                        	   171: 
00:80EB 0A              	   172:   .byte NEWLINE
                        	   173: 
00:80EC 4578616D706C6573	   174:   .byte "Examples:", NEWLINE
00:80F4 3A
00:80F5 0A
00:80F6 3031202B20303220	   175:   .byte "01 + 02 = 03", NEWLINE
00:80FE 3D203033
00:8102 0A
00:8103 6135202D20303220	   176:   .byte "a5 - 02 = a3", NEWLINE
00:810B 3D206133
00:810F 0A
                        	   177: 
00:8110 0A              	   178:   .byte NEWLINE, 0
00:8111 00
                        	   179: 
                        	   180: equals:
00:8112 203D20          	   181:   .byte " = ", 0
00:8115 00


Symbols by name:
BYTE_BUILD                       E:0040
CLEAR                            E:0011
ESCAPE                           E:001B
EXIT_VEC                         E:FFF8
NEWLINE                          E:000A
OPERANDA                         E:0030
OPERANDB                         E:0010
OPERATOR                         E:0020
PRINT                            E:0050
SERIAL                           E:8002
_expression_addition             A:803C
_expression_print                A:8041
_get_key_exit                    A:8061
_get_nibble_digit                A:8074
_hex_nibble_digit                A:807F
_print_done                      A:80AF
_print_loop                      A:80A4
equals                           A:8112
expression                       A:8014
get_byte                         A:8093
get_key                          A:8050
get_nibble                       A:8069
hex_byte                         A:8082
hex_nibble                       A:8077
loop                             A:800E
main                             A:8003
print                            A:80A2
welcome_message                  A:80B0

Symbols by value:
000A NEWLINE
0010 OPERANDB
0011 CLEAR
001B ESCAPE
0020 OPERATOR
0030 OPERANDA
0040 BYTE_BUILD
0050 PRINT
8002 SERIAL
8003 main
800E loop
8014 expression
803C _expression_addition
8041 _expression_print
8050 get_key
8061 _get_key_exit
8069 get_nibble
8074 _get_nibble_digit
8077 hex_nibble
807F _hex_nibble_digit
8082 hex_byte
8093 get_byte
80A2 print
80A4 _print_loop
80AF _print_done
80B0 welcome_message
8112 equals
FFF8 EXIT_VEC
