Sections:
00: "org0001:8003" (8003-81FD)


Source: "programs/pong.asm"
                        	     1:     .org $8003
                        	     2: 
                        	     3: ; memory map:
                        	     4: TIMER    = $8001
                        	     5: SERIAL   = $8002
                        	     6: EXIT_VEC = $fff8
                        	     7: 
                        	     8: ; ascii codes:
                        	     9: NEWLINE   = $0a
                        	    10: CLEAR     = $11
                        	    11: ESCAPE    = $1b
                        	    12: 
                        	    13: ; memory allocation:
                        	    14: player    = $30 ; 1 byte
                        	    15: ballx     = $32 ; 1 byte
                        	    16: bally     = $33 ; 1 byte
                        	    17: ballright = $34 ; 1 byte
                        	    18: ballup    = $35 ; 1 byte
                        	    19: iteration = $36 ; 1 byte
                        	    20: score     = $37 ; 1 byte
                        	    21: PRINT     = $38 ; 2 bytes
                        	    22: 
                        	    23: main:
00:8003 A907            	    24:   lda #7
00:8005 8530            	    25:   sta player
00:8007 8532            	    26:   sta ballx
00:8009 8533            	    27:   sta bally
00:800B A900            	    28:   lda #0
00:800D 8536            	    29:   sta iteration
00:800F 8537            	    30:   sta score
00:8011 8534            	    31:   sta ballright
00:8013 8535            	    32:   sta ballup
                        	    33: 
                        	    34: loop:
00:8015 203E81          	    35:   jsr get_input
00:8018 201B81          	    36:   jsr move_ball
00:801B 205480          	    37:   jsr collide
00:801E 208D80          	    38:   jsr draw
                        	    39: 
00:8021 EA              	    40:   nop
00:8022 EA              	    41:   nop
00:8023 EA              	    42:   nop
00:8024 EA              	    43:   nop
00:8025 EA              	    44:   nop
00:8026 EA              	    45:   nop
00:8027 EA              	    46:   nop
00:8028 EA              	    47:   nop
00:8029 EA              	    48:   nop
00:802A EA              	    49:   nop
                        	    50: 
00:802B E636            	    51:   inc iteration
                        	    52: 
00:802D 4C1580          	    53:   jmp loop
                        	    54: 
                        	    55: exit:
00:8030 208D80          	    56:   jsr draw
00:8033 A9B2            	    57:   lda #exit_message
00:8035 8538            	    58:   sta PRINT
00:8037 A981            	    59:   lda #>exit_message
00:8039 8539            	    60:   sta PRINT + 1
00:803B 207481          	    61:   jsr print
                        	    62: _exit_loop:
00:803E AD0280          	    63:   lda SERIAL
00:8041 C90A            	    64:   cmp #NEWLINE
00:8043 F00C            	    65:   beq _exit_restart
00:8045 C91B            	    66:   cmp #ESCAPE
00:8047 D0F5            	    67:   bne _exit_loop
00:8049 A911            	    68:   lda #CLEAR
00:804B 8D0280          	    69:   sta SERIAL
00:804E 6CF8FF          	    70:   jmp (EXIT_VEC)
                        	    71: _exit_restart:
00:8051 4C0380          	    72:   jmp main
                        	    73: 
                        	    74: collide:
00:8054 A532            	    75:   lda ballx
00:8056 C90F            	    76:   cmp #15
00:8058 9008            	    77:   bcc _collide_not_right
00:805A A901            	    78:   lda #1
00:805C 8534            	    79:   sta ballright
00:805E C632            	    80:   dec ballx
00:8060 C632            	    81:   dec ballx
                        	    82: _collide_not_right:
                        	    83: 
00:8062 A532            	    84:   lda ballx
00:8064 C901            	    85:   cmp #1
00:8066 B010            	    86:   bcs _collide_not_left
00:8068 A533            	    87:   lda bally
00:806A C530            	    88:   cmp player
00:806C D0C2            	    89:   bne exit
00:806E E637            	    90:   inc score
00:8070 A900            	    91:   lda #0
00:8072 8534            	    92:   sta ballright
00:8074 E632            	    93:   inc ballx
00:8076 E632            	    94:   inc ballx
                        	    95: _collide_not_left:
                        	    96: 
00:8078 A533            	    97:   lda bally
00:807A C90F            	    98:   cmp #15
00:807C 9004            	    99:   bcc _collide_not_bottom
00:807E A900            	   100:   lda #0
00:8080 8535            	   101:   sta ballup
                        	   102: _collide_not_bottom:
                        	   103: 
00:8082 A533            	   104:   lda bally
00:8084 C901            	   105:   cmp #1
00:8086 B004            	   106:   bcs _collide_not_top
00:8088 A901            	   107:   lda #1
00:808A 8535            	   108:   sta ballup
                        	   109: _collide_not_top:
                        	   110: 
00:808C 60              	   111:   rts
                        	   112: 
                        	   113: draw:
                        	   114:   ; print the score message
00:808D A986            	   115:   lda #score_message
00:808F 8538            	   116:   sta PRINT
00:8091 A981            	   117:   lda #>score_message
00:8093 8539            	   118:   sta PRINT + 1
00:8095 207481          	   119:   jsr print
00:8098 A537            	   120:   lda score
00:809A 206381          	   121:   jsr hex_byte
00:809D E030            	   122:   cpx #"0"
00:809F F003            	   123:   beq _draw_skip_leading_zero
00:80A1 8E0280          	   124:   stx SERIAL
                        	   125: _draw_skip_leading_zero:
00:80A4 8C0280          	   126:   sty SERIAL
00:80A7 A90A            	   127:   lda #NEWLINE
00:80A9 8D0280          	   128:   sta SERIAL
00:80AC 8D0280          	   129:   sta SERIAL
                        	   130: 
00:80AF A000            	   131:   ldy #0
                        	   132: _draw_y_loop:
00:80B1 A9A9            	   133:   lda #line_start
00:80B3 8538            	   134:   sta PRINT
00:80B5 A981            	   135:   lda #>line_start
00:80B7 8539            	   136:   sta PRINT + 1
00:80B9 207481          	   137:   jsr print
                        	   138: 
00:80BC A200            	   139:   ldx #0
                        	   140: _draw_x_loop:
00:80BE E432            	   141:   cpx ballx
00:80C0 D012            	   142:   bne _draw_dont_print_ball
00:80C2 C433            	   143:   cpy bally
00:80C4 D00E            	   144:   bne _draw_dont_print_ball
00:80C6 A9FA            	   145:   lda #ball
00:80C8 8538            	   146:   sta PRINT
00:80CA A981            	   147:   lda #>ball
00:80CC 8539            	   148:   sta PRINT + 1
00:80CE 207481          	   149:   jsr print
00:80D1 4C0681          	   150:   jmp _draw_x_loop_next
                        	   151: _draw_dont_print_ball:
                        	   152: 
00:80D4 E000            	   153:   cpx #0
00:80D6 D011            	   154:   bne _draw_dont_print_player
00:80D8 C430            	   155:   cpy player
00:80DA D00D            	   156:   bne _draw_dont_print_player
00:80DC A920            	   157:   lda #" "
00:80DE 8D0280          	   158:   sta SERIAL
00:80E1 A97C            	   159:   lda #"|"
00:80E3 8D0280          	   160:   sta SERIAL
00:80E6 4C0681          	   161:   jmp _draw_x_loop_next
                        	   162: _draw_dont_print_player:
                        	   163: 
00:80E9 E00F            	   164:   cpx #15
00:80EB D011            	   165:   bne _draw_dont_print_ai
00:80ED C433            	   166:   cpy bally
00:80EF D00D            	   167:   bne _draw_dont_print_ai
00:80F1 A97C            	   168:   lda #"|"
00:80F3 8D0280          	   169:   sta SERIAL
00:80F6 A920            	   170:   lda #" "
00:80F8 8D0280          	   171:   sta SERIAL
00:80FB 4C0681          	   172:   jmp _draw_x_loop_next
                        	   173: _draw_dont_print_ai:
                        	   174: 
00:80FE A920            	   175:   lda #" "
00:8100 8D0280          	   176:   sta SERIAL
00:8103 8D0280          	   177:   sta SERIAL
                        	   178: 
                        	   179: _draw_x_loop_next:
00:8106 E8              	   180:   inx
00:8107 E010            	   181:   cpx #16
00:8109 D0B3            	   182:   bne _draw_x_loop
                        	   183: 
00:810B A9AD            	   184:   lda #line_trail
00:810D 8538            	   185:   sta PRINT
00:810F A981            	   186:   lda #>line_trail
00:8111 8539            	   187:   sta PRINT + 1
00:8113 207481          	   188:   jsr print
                        	   189: 
00:8116 C8              	   190:   iny
00:8117 C010            	   191:   cpy #16
00:8119 D096            	   192:   bne _draw_y_loop
                        	   193: 
                        	   194: ; move the ball based on ballright and ballup
                        	   195: move_ball:
00:811B A536            	   196:   lda iteration
00:811D 2901            	   197:   and #%00000001
00:811F D01C            	   198:   bne _move_ball_ret
                        	   199:   
00:8121 A534            	   200:   lda ballright
00:8123 F005            	   201:   beq _move_ball_right
00:8125 C632            	   202:   dec ballx
00:8127 4C2C81          	   203:   jmp _move_ball_check_up
                        	   204: _move_ball_right:
00:812A E632            	   205:   inc ballx
                        	   206: _move_ball_check_up:
00:812C A536            	   207:   lda iteration
00:812E 2903            	   208:   and #%0000011
00:8130 D00B            	   209:   bne _move_ball_ret
                        	   210: 
00:8132 A534            	   211:   lda ballright
00:8134 A535            	   212:   lda ballup
00:8136 F003            	   213:   beq _move_ball_up
00:8138 E633            	   214:   inc bally
00:813A 60              	   215:   rts
                        	   216: _move_ball_up:
00:813B C633            	   217:   dec bally
                        	   218: _move_ball_ret:
00:813D 60              	   219:   rts
                        	   220: 
                        	   221: get_input:
00:813E AD0280          	   222:   lda SERIAL
                        	   223: 
                        	   224:   ; if they pressed w or s, move the player
00:8141 C977            	   225:   cmp #"w"
00:8143 F005            	   226:   beq _get_input_w
00:8145 C973            	   227:   cmp #"s"
00:8147 F006            	   228:   beq _get_input_s
                        	   229: 
                        	   230:   ; otherwise return
00:8149 60              	   231:   rts
                        	   232: _get_input_w:
00:814A C630            	   233:   dec player
00:814C 4C5181          	   234:   jmp _get_input_wrap
                        	   235: _get_input_s:
00:814F E630            	   236:   inc player
                        	   237: _get_input_wrap:
                        	   238:   ; keep the player on screen
00:8151 A530            	   239:   lda player
00:8153 290F            	   240:   and #$0f
00:8155 8530            	   241:   sta player
00:8157 60              	   242:   rts
                        	   243: 
                        	   244: ; return (in a) the a register as hex
                        	   245: ; modifies: a (duh)
                        	   246: hex_nibble:
00:8158 C90A            	   247:   cmp #10
00:815A 9004            	   248:   bcc _hex_nibble_digit
00:815C 18              	   249:   clc
00:815D 6957            	   250:   adc #"a" - 10
00:815F 60              	   251:   rts
                        	   252: _hex_nibble_digit:
00:8160 6930            	   253:   adc #"0"
00:8162 60              	   254:   rts
                        	   255: 
                        	   256: ; return (in x & y) the a register as hex
                        	   257: ; modifies: x, y, a
                        	   258: hex_byte:
00:8163 48              	   259:   pha ; save the full value for later
                        	   260:   ; get just the MSN
00:8164 4A              	   261:   lsr
00:8165 4A              	   262:   lsr
00:8166 4A              	   263:   lsr
00:8167 4A              	   264:   lsr
00:8168 205881          	   265:   jsr hex_nibble
00:816B AA              	   266:   tax ; but the hex char for the MSN in x
                        	   267: 
00:816C 68              	   268:   pla ; bring back the full value
00:816D 290F            	   269:   and #$0f ; get just the LSN
00:816F 205881          	   270:   jsr hex_nibble
00:8172 A8              	   271:   tay ; but the hex char for the LSN in y
                        	   272: 
00:8173 60              	   273:   rts
                        	   274: 
                        	   275: ; write the address of a null-terminated string to PRINT
                        	   276: ; modifies: a
                        	   277: print:
00:8174 98              	   278:   tya
00:8175 48              	   279:   pha
00:8176 A000            	   280:   ldy #0
                        	   281: _print_loop:
00:8178 B138            	   282:   lda (PRINT),y
00:817A F007            	   283:   beq _print_done
00:817C 8D0280          	   284:   sta SERIAL
00:817F C8              	   285:   iny
00:8180 4C7881          	   286:   jmp _print_loop
                        	   287: _print_done:
00:8183 68              	   288:   pla
00:8184 A8              	   289:   tay
00:8185 60              	   290:   rts
                        	   291: 
                        	   292: score_message:
00:8186 11              	   293:   .byte CLEAR
00:8187 1B              	   294:   .byte ESCAPE, "[7m"
00:8188 5B376D
00:818B 204F363420506F6E	   295:   .byte " O64 Pong v1.0.4 "
00:8193 672076312E302E34
00:819B 20
00:819C 1B              	   296:   .byte ESCAPE, "[0m", NEWLINE
00:819D 5B306D
00:81A0 0A
00:81A1 53636F72653A20  	   297:   .byte "Score: ", 0
00:81A8 00
                        	   298: line_start:
00:81A9 7C7C20          	   299:   .byte "|| ", 0
00:81AC 00
                        	   300: line_trail:
00:81AD 207C7C          	   301:   .byte " ||", NEWLINE, 0
00:81B0 0A
00:81B1 00
                        	   302: exit_message:
00:81B2 0A              	   303:   .byte NEWLINE
00:81B3 2A2A2A2A2047616D	   304:   .byte "**** Game Over! ****", NEWLINE
00:81BB 65204F7665722120
00:81C3 2A2A2A2A
00:81C7 0A
00:81C8 507265737320656E	   305:   .byte "Press enter to play again.", NEWLINE
00:81D0 74657220746F2070
00:81D8 6C61792061676169
00:81E0 6E2E
00:81E2 0A
00:81E3 5072657373206573	   306:   .byte "Press escape to exit.", NEWLINE
00:81EB 6361706520746F20
00:81F3 657869742E
00:81F8 0A
00:81F9 00              	   307:   .byte 0
                        	   308: ball:
00:81FA 2323            	   309:   .byte "##", 0
00:81FC 00


Symbols by name:
CLEAR                            E:0011
ESCAPE                           E:001B
EXIT_VEC                         E:FFF8
NEWLINE                          E:000A
PRINT                            E:0038
SERIAL                           E:8002
_collide_not_bottom              A:8082
_collide_not_left                A:8078
_collide_not_right               A:8062
_collide_not_top                 A:808C
_draw_dont_print_ai              A:80FE
_draw_dont_print_ball            A:80D4
_draw_dont_print_player          A:80E9
_draw_skip_leading_zero          A:80A4
_draw_x_loop                     A:80BE
_draw_x_loop_next                A:8106
_draw_y_loop                     A:80B1
_exit_loop                       A:803E
_exit_restart                    A:8051
_get_input_s                     A:814F
_get_input_w                     A:814A
_get_input_wrap                  A:8151
_hex_nibble_digit                A:8160
_move_ball_check_up              A:812C
_move_ball_ret                   A:813D
_move_ball_right                 A:812A
_move_ball_up                    A:813B
_print_done                      A:8183
_print_loop                      A:8178
ball                             A:81FA
ballright                        E:0034
ballup                           E:0035
ballx                            E:0032
bally                            E:0033
collide                          A:8054
draw                             A:808D
exit                             A:8030
exit_message                     A:81B2
get_input                        A:813E
hex_byte                         A:8163
hex_nibble                       A:8158
iteration                        E:0036
line_start                       A:81A9
line_trail                       A:81AD
loop                             A:8015
main                             A:8003
move_ball                        A:811B
player                           E:0030
print                            A:8174
score                            E:0037
score_message                    A:8186

Symbols by value:
000A NEWLINE
0011 CLEAR
001B ESCAPE
0030 player
0032 ballx
0033 bally
0034 ballright
0035 ballup
0036 iteration
0037 score
0038 PRINT
8002 SERIAL
8003 main
8015 loop
8030 exit
803E _exit_loop
8051 _exit_restart
8054 collide
8062 _collide_not_right
8078 _collide_not_left
8082 _collide_not_bottom
808C _collide_not_top
808D draw
80A4 _draw_skip_leading_zero
80B1 _draw_y_loop
80BE _draw_x_loop
80D4 _draw_dont_print_ball
80E9 _draw_dont_print_player
80FE _draw_dont_print_ai
8106 _draw_x_loop_next
811B move_ball
812A _move_ball_right
812C _move_ball_check_up
813B _move_ball_up
813D _move_ball_ret
813E get_input
814A _get_input_w
814F _get_input_s
8151 _get_input_wrap
8158 hex_nibble
8160 _hex_nibble_digit
8163 hex_byte
8174 print
8178 _print_loop
8183 _print_done
8186 score_message
81A9 line_start
81AD line_trail
81B2 exit_message
81FA ball
FFF8 EXIT_VEC
